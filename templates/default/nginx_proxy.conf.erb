upstream app_server {
    server localhost:8080 fail_timeout=0;
}

server {
    listen 80;
    server_name <%= @server_name %>;
    access_log  <%= @access_log %>;
    error_log   <%= @error_log %>;

    location / {
      proxy_pass_header Server;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Scheme $scheme;
      proxy_connect_timeout 10;
      proxy_read_timeout 10;
      proxy_pass http://app_server;
    }

    # From http://www.xormedia.com/django-allowed-hosts-and-amazon-elastic-load-balancer/
    #
    # This gets rid of some of the security that allowed_hosts is supposed to
    # provide, so it'd be nice if there were a better way.
    #
    # if the host header is an ip address change it to www.mysite.com
    # this works around requests coming from ELB with either the instance's
    # internal ip address in the case of health checks or an unknown internal
    # ip address in the case of latency checks. translating them to a known
    # good host header makes django's ALLOWED_HOSTS happy

    if ($host ~ "\d+\.\d+\.\d+\.\d+") {
        set $my_host "shopsync.com";
    }

    set $my_host $host;
    
    location /static {
        alias <%= @static_root %>;
        expires 1y;
        add_header Cache-Control "public";
    }

    error_page 500 502 503 504 /static/50x.html;
}
